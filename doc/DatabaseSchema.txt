Database Schema
2009-03-24
Kevin Smith

These are rough notes. Our system is very similar to a 
Network Database Model, except that our associations are 
sometimes stored in the owner, sometimes in the member, 
and about half the time are not stored at all (they are 
implicit).

Network DB model is sometimes known as CODASYL, or as 
DBTG. Perhaps also IDMS.

Our system is unlike most Object Databases, because those 
focus on transparent persistence, and storing behavior 
(methods) along with the data. They also do not have any 
great solutions to inheritance, which we also struggle with.

Based on CODASYL Network Database standards, I propose these 
possible associations:

Owner A has Members B, C, D
Owner E refers to Members F, G, H

An association may be marked as "Mandatory", meaning that 
a member cannot be removed from the association. In that 
case, it must be deleted, which implicitly removes it. 
This is known as a "has" relationship.

Alternatively, an association may be "Optional", meaning that 
a member may be removed without being deleted. This is known 
as a "refers to" relationship.

An object cannot be removed if it has any members in any 
association where it is the owner. Those members mus be 
deleted or removed first.


Cause has Indicator(s)
Cause has Objective(s)
Target has Goal(s)
Target has KEA(s)
Target has DiagramFactor(s)
Target has FactorLink(s)
FactorLink has DiagramFactorLink(s)
DiagramFactor has DiagramFactorLink(s)
Task has Task(s)
Strategy has Task(s)
Indicator has Task(s)
Task refers to Resource(s)
DiagramObject has DiagramFactor(s)
DiagramObject has DiagramFactorLink(s)
KEA has Indicator(s)



Here is a GREAT site about CODASYL and Network Databases:
http://coronet.iicm.edu/wbtmaster/allcoursescontent/netlib/library.htm  
  
  
Here is a GREAT slide show about DBTG databases:
http://nlp.postech.ac.kr/Course/ITEC521/dbslide-5thedition/appA.ppt

JCR (Java Content Repository) might serve as a reasonable back-end.
It relies on a FileSystem or RelationalDatabase engine to do the real work, 
but exposes a tree node structure, and provides searching.
http://en.wikipedia.org/wiki/Content_repository_API_for_Java
http://jackrabbit.apache.org/

Neo4j looks very similar to what we have.
http://neo4j.org/doc/

CouchDB is pretty similar to our existing database, as it stores JSON
documents. It provides a REST HTTP API, and supports replication and 
multi-user access with conflict detection.
http://couchdb.apache.org/

Then there is FeatherDB, a loose clone of CouchDB but in native Java, 
which would allow us to run it as an embedded db (rather than http):
http://fourspaces.com/blog/2008/4/11/FeatherDB_Java_JSON_Document_database


  
RelationshipManager

At the time the db is opened, all objects are scanned, and 
the RelationshipManager is populated. From then on, the 
RelationshipManager listens for any object creations, 
deletions, or reference changes, and updates itself as 
needed.

Any questions about object relationships (owns/owned by, 
depends on/is depended on by, refers to/referred to by) can 
be answered immediately by the RelationshipManager. It is 
responsible for handling loops sanely.


<!-- Ant build file - Needs Ant v1.6.x or later -->
<project name="miradi" default="release" basedir="../../">
    <description>
        Miradi Build File
    </description>
	
	<!-- product version -->
	<property name="version.prefix" value=""/>
	<property name="version.main" value = "4.6"/>
	<property name="version.minor" value = ".0"/>
	<property name="version.full" value="${version.main}${version.minor}"/>

	<loadresource property="version.full.installer">
		<propertyresource name="version.full"/>
		<filterchain>
			<tokenfilter>
				<filetokenizer/>
				<replacestring from="." to="_"/>
			</tokenfilter>
		</filterchain>
	</loadresource>

	<property name="version.langpack" value="${version.main}" />
  
	<property environment="env"/>

    <!-- env vars from build machine -->
    <property name="mac.build.user" value="${env.SITKA.MAC.BUILDUSER}" />
    <property name="mac.build.server" value="${env.SITKA.MAC.BUILDSERVER}" />
    <property name="mac.build.password" value="${env.SITKA.MAC.BUILDPASSWORD}" />
    <property name="mac.build.certname" value="${env.SITKA.MAC.BUILDCERT}" />

    <property name="windows.build.user" value="${env.SITKA.WINDOWS.BUILDUSER}" />
    <property name="windows.build.server" value="${env.SITKA.WINDOWS.BUILDSERVER}" />
    <property name="windows.build.password" value="${env.SITKA.WINDOWS.BUILDPASSWORD}" />
	<!--
    <property name="windows.build.ev.certname" value="${env.SITKA.WINDOWS.EV.BUILDCERT}" />
	<property name="windows.build.ev.certname.password" value="${env.SITKA.WINDOWS.EV.BUILDCERT.PASSWORD}" />
    -->
    <property name="windows.build.certname.pfx" value="${env.SITKA.WINDOWS.BUILDCERT.PFX}" />
	<!--
    <property name="windows.build.certname.spc" value="${env.SITKA.WINDOWS.BUILDCERT.SPC}" />
    <property name="windows.build.certname.pvk" value="${env.SITKA.WINDOWS.BUILDCERT.PVK}" />
    -->
    <property name="windows.build.certname.password" value="${env.SITKA.WINDOWS.BUILDCERT.PASSWORD}" />
    <property name="miradi.web.domain" value="${env.SITKA.MIRADI.WEB.DOMAIN}" />
    <property name="jenkins.workspace" value="${env.WORKSPACE}"/>
	<property name="scm.miradi-client.branch" value="${env.SCM.BRANCH}"/>

    <!-- repos -->
    <property name="scm.miradi-client" value="https://github.com/sitkatech/miradi-client"/>
    <property name="scm.miradi-client-thirdparty" value="https://github.com/sitkatech/miradi-client-thirdparty"/>

	<!-- directories -->
	<property name="build.dir" value="${jenkins.workspace}/build"/>
    <property name="dist.dir" value="${jenkins.workspace}/../miradi-client-dist"/>

    <property name="dist.temp" value="${dist.dir}/temp"/>
    <property name="dist.temp.jars" value="${dist.temp}/jars"/>
    <property name="dist.temp.third-party" value="${dist.temp}/miradi-client-thirdparty"/>
	
	<property name="translations.subdir" value="translations"/>
    
	<property name="miradi.root.dir" value="${jenkins.workspace}" />
    <property name="eam.src.root" value="${jenkins.workspace}/source"/>
    <property name="eam.test.src.root" value="${jenkins.workspace}/tests"/>
    <property name="eam.class.root" value="${dist.temp}/bin"/>
    <property name="eam.test.class.root" value="${dist.temp}/testbin"/>
	<property name="eam.thirdparty" value="${dist.temp.jars}"/>
	<property name="eam.resources" value="${eam.src.root}/resources" />
	<property name="eam.icons" value="${eam.resources}/icons" />
	<property name="eam.fieldlabels.properties" value="${eam.resources}/FieldLabels.properties"/>
	<property name="eam.translations.dir" value = "${eam.src.root}/${translations.subdir}"/>
    
    <property name="translations.dir" value="${jenkins.workspace}/${translations.subdir}" />

	<property name="version.file" value = "${dist.dir}/miradi.version.txt" />
	<property name="timestamp.file" value = "${dist.dir}/miradi.timestamp.txt" />

	<!-- third-party jars -->
	<property name="browserlauncher.jar" value="${dist.temp.jars}/BrowserLauncher2/BrowserLauncher2-all-10rc4.jar"/>
	<property name="commons-lang3.jar" value="${dist.temp.jars}/commons-lang3/3.1/commons-lang3-3.1.jar"/>
	<property name="miradi-jgraph.jar" value="${dist.temp.jars}/jgraph/miradi-jgraph-5.12.2.2b.jar"/>
	<property name="jcalendar.jar" value="${dist.temp.jars}/jcalendar-1.3.2/jcalendar-1.3.2.jar"/>
	<property name="jing.jar" value="${dist.temp.jars}/jing/bin/jing.jar" />
	<property name="martus-swing.jar" value="${dist.temp.jars}/martus-swing/bin/martus-swing.jar" />
	<property name="martus-utils.jar" value="${dist.temp.jars}/martus-utils/bin/martus-utils.jar" />
	<property name="swingx.jar" value="${dist.temp.jars}/swingx/0.9.7/swingx-0.9.7.jar" />
	<property name="jortho.jar" value="${dist.temp.jars}/jortho/bin/jortho.jar" />
	<property name="shef.jar" value="${dist.temp.jars}/shef/0.5/shef.jar" />
	<property name="sam.jar" value="${dist.temp.jars}/shef/0.5/sam.jar" />
	<property name="jtidy.jar" value="${dist.temp.jars}/shef/0.5/jtidy-8.0.jar" />
	<property name="junit.jar" value="${dist.temp.jars}/JUnit/bin/junit.jar" />
	<property name="flatlaf.jar" value="${dist.temp.jars}/flatlaf/flatlaf-1.6.1.jar" />
	<property name="flatlaf-intellij-themes.jar" value="${dist.temp.jars}/flatlaf/flatlaf-intellij-themes-1.6.1.jar" />

	<!-- classpath -->
    <path id="eam.class.path">
        <pathelement path="${eam.class.root}/"/>
        <pathelement path="${eam.test.class.root}/"/>
        <pathelement path="${martus-swing.jar}/"/>
        <pathelement path="${martus-utils.jar}/"/>
		<pathelement path="${browserlauncher.jar}"/>
    	<pathelement path="${commons-lang3.jar}"/>
		<pathelement path="${miradi-jgraph.jar}"/>
    	<pathelement path="${jcalendar.jar}"/>
    	<pathelement path="${jing.jar}"/>
    	<pathelement path="${swingx.jar}"/>
    	<pathelement path="${jortho.jar}"/>
    	<pathelement path="${shef.jar}"/>
    	<pathelement path="${sam.jar}"/>
    	<pathelement path="${jtidy.jar}"/>
    	<pathelement path="${junit.jar}"/>
    	<pathelement path="${flatlaf.jar}"/>
    	<pathelement path="${flatlaf-intellij-themes.jar}"/>
     </path>
    
    <!-- defined values -->
	<property name="installer.top" value="${build.dir}/installer"/>
	<property name="installer.buildfiles.dir" value="${installer.top}/BuildFiles"/>
	<property name="installer.mac.dir" value="${installer.top}/Mac" />
	<property name="installer.mac.dmgbuild.dir" value="${installer.mac.dir}/dmgbuild" />

	<property name="samples.marine.miradi" value="MarineExample.Miradi"/>
	<property name="samples.marine.miradi.version" value="MarineExample_${version.full.installer}.Miradi"/>

	<property name="dist.mactree" value="${dist.dir}/MiradiMacInstall" />
	<property name="mac.app.name" value="Miradi-${version.full}" />
	<property name="windows.setup.name" value="MiradiSetup_${version.full.installer}" />

	<!-- translations -->
	<property name="miradi.pot" value="${dist.dir}/miradi-${version.langpack}.pot" />
    <property name="miradi.po.bg" value="${translations.dir}/miradi_bg.po" />
    <property name="miradi.po.de" value="${translations.dir}/miradi_de.po" />
    <property name="miradi.po.es" value="${translations.dir}/miradi_es.po" />
    <property name="miradi.po.fr" value="${translations.dir}/miradi_fr.po" />
    <property name="miradi.po.he" value="${translations.dir}/miradi_he.po" />
    <property name="miradi.po.hu" value="${translations.dir}/miradi_hu.po" />
    <property name="miradi.po.id" value="${translations.dir}/miradi_id.po" />
    <property name="miradi.po.it" value="${translations.dir}/miradi_it.po" />
    <property name="miradi.po.mn" value="${translations.dir}/miradi_mn.po" />
    <property name="miradi.po.ne" value="${translations.dir}/miradi_ne.po" />
    <property name="miradi.po.plt" value="${translations.dir}/miradi_plt.po" />
    <property name="miradi.po.pt" value="${translations.dir}/miradi_pt.po" />
    <property name="miradi.po.psp" value="${translations.dir}/miradi_psp.po" />
    <property name="miradi.po.uk" value="${translations.dir}/miradi_uk.po" />
    <property name="miradi.po.zh" value="${translations.dir}/miradi_zh.po" />
    <property name="miradi.po.aid" value="${translations.dir}/miradi_aid.po" />

<!-- ================================================================== -->
<!-- I N I T                                                            -->
<!-- ================================================================== -->
<target name="init" depends="cleanup" description="Initialize build number, timestamp and version">
    <tstamp>
        <format property="version.timestamp" pattern="yyyy-MM-dd HH:mm:ss"/>
    </tstamp>

    <tstamp/>

    <echo message="Date timestamp is ${DSTAMP}" />
    <echo message="Time timestamp is ${TSTAMP}" />
    <echo message="Version timestamp is ${version.timestamp}" />

    <fail message="env.WORKSPACE is not defined" unless="env.WORKSPACE"/>
    <echo message="env.WORKSPACE = ${env.WORKSPACE}"/>

    <fail message="env.JAVA.BOOT.CLASSPATH is not defined" unless="env.JAVA.BOOT.CLASSPATH"/>
    <echo message="env.JAVA.BOOT.CLASSPATH = ${env.JAVA.BOOT.CLASSPATH}"/>

    <fail message="env.INSTALL4J.INSTALL.PATH is not defined" unless="env.INSTALL4J.INSTALL.PATH"/>
    <echo message="env.INSTALL4J.INSTALL.PATH = ${env.INSTALL4J.INSTALL.PATH}"/>

    <fail message="env.INSTALL4J.LICENSE is not defined" unless="env.INSTALL4J.LICENSE"/>

    <fail message="env.INSTALL4J.JRES.PATH is not defined" unless="env.INSTALL4J.JRES.PATH"/>
    <echo message="env.INSTALL4J.JRES.PATH = ${env.INSTALL4J.JRES.PATH}"/>

	<fail message="env.SCM.BRANCH is not defined" unless="env.SCM.BRANCH"/>
	<echo message="env.SCM.BRANCH = ${env.SCM.BRANCH}"/>

	<condition property="isLinux">
        <and>
            <os family="unix"/>
            <not>
                <os family="mac"/>
            </not>
        </and>
    </condition>

    <mkdir dir='${dist.dir}' />
    <mkdir dir='${dist.temp.jars}' />

    <echo file="${version.file}" append="false" message="${version.prefix}${version.full}"/>
    <echo file="${timestamp.file}" append="false" message="${version.timestamp}"/>
</target>

<!-- ================================================================== -->
<!-- CLEANUP                                                          -->
<!-- ================================================================== -->
<target name="cleanup" description="Delete temp files">
	<delete dir="${dist.dir}"/>
</target>

<!-- ================================================================== -->
<!-- B U I L D                                                          -->
<!-- ================================================================== -->
<target name="build" depends="init, ThirdParty" description="Compile Miradi">
	<mkdir dir="${eam.class.root}"/>

	<javac source="1.8" target="1.8" compiler="javac1.8" optimize="on" failonerror="true"
			includeantruntime="false"
			debug="true" debuglevel="lines,source"
			srcdir="${eam.src.root}" destdir="${eam.class.root}"
			bootclasspath="${env.JAVA.BOOT.CLASSPATH}" >
		<compilerarg value="-Xlint:unchecked" />
		<compilerarg value="-Werror" />
		<classpath refid="eam.class.path"/>
		<include name="**/*.java"/>
	</javac>

</target>

<!-- ================================================================== -->
<!-- T E S T                                                            -->
<!-- ================================================================== -->
<target name="test" depends="init, build" description="Run unit tests">
	<mkdir dir="${eam.test.class.root}"/>
	<javac source="1.8" target="1.8" compiler="javac1.8" optimize="on" failonerror="true"
			srcdir="${eam.test.src.root}" destdir="${eam.test.class.root}" >
		<compilerarg value="-Xlint:unchecked" />
		<classpath refid="eam.class.path"/>
		<classpath location='${junit.jar}' />
		<include name="**/*.java"/>
	</javac>

	<copy todir="${eam.test.class.root}/resources">
		<fileset dir="${eam.resources}" />
	</copy>
	<copy todir="${eam.test.class.root}/translations">
		<fileset dir="${eam.test.src.root}/translations" />
	</copy>
	<copy todir="${eam.test.class.root}">
		<fileset dir="${eam.src.root}">
			<include name="**/*.txt" />
		</fileset>
	</copy>
	<copy todir="${eam.test.class.root}">
		<fileset dir="${eam.test.src.root}">
			<include name="**/*.xls" />
			<include name="**/*.mpz" />
			<include name="**/*.Miradi" />
		</fileset>
	</copy>

	<junit haltonfailure='on' showoutput='on'>
		<classpath location='${junit.jar}' />
		<classpath refid='eam.class.path' />
		<classpath location='${eam.class.root}' />

		<test name='org.miradi.main.MainTests' todir='${eam.test.class.root}' />

		<formatter type="plain" />

	</junit>
</target>

<!-- ================================================================== -->
<!-- J A R                                                          -->
<!-- ================================================================== -->
<target name="jar" depends="test" description="Create jar">
	<mkdir dir="${dist.dir}"/>
	<jar destfile="${dist.dir}/miradi.jar">
		<manifest>
			<attribute name="main-class" value="org.miradi.main.Miradi"/>
		</manifest>
		<fileset dir="${eam.class.root}" includes="**/*.class"/>
		<fileset dir="${eam.src.root}" includes="resources/**/*" />
		<fileset dir="${eam.src.root}" includes="org/miradi/xml/**/*.txt" />
		<fileset dir="${dist.dir}" includes="*.txt" />
	</jar>
</target>

<!-- ================================================================== -->
<!-- DOWNLOAD FROM THIRD PARTY REPO                                     -->
<!-- ================================================================== -->
<target name="copy-thirdparty">
	<property name='dir' value='${dist.temp.jars}/${directory}' />
	<property name='from' value='${dist.temp.third-party}/${directory}/${filename}' />
	<mkdir dir='${dir}' />
    <copy file="${from}" todir="${dir}" />
</target>

<target name="clean-thirdparty">
    <echo message="Deleting ${dist.temp.third-party}" />
    <delete dir="${dist.temp.third-party}"/>
</target>

<target name="get-thirdparty" depends="clean-thirdparty">
    <echo message="Cloning source from ${scm.miradi-client-thirdparty} to ${dist.temp}" />
    <mkdir dir='${dist.temp}' />
    <exec executable="git" failonerror="true" dir="${dist.temp}">
        <arg value="clone" />
        <arg value="${scm.miradi-client-thirdparty}" />
    </exec>
</target>

<!-- ================================================================== -->
<!-- THIRD-PARTY JARS, SOURCE, LICENSES                                 -->
<!-- ================================================================== -->
<target name='ThirdParty' depends='get-thirdparty' description='Download third-party jars'>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='BrowserLauncher2' />
		<param name='filename' value='BrowserLauncher2-all-10rc4.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='BrowserLauncher2' />
		<param name='filename' value='License.BrowserLauncher2' />
	</antcall>
	<move file="${dist.temp.jars}/BrowserLauncher2/License.BrowserLauncher2" tofile="${dist.temp.jars}/BrowserLauncher2/BrowserLauncher2-license.txt"/>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='commons-lang3/3.1' />
		<param name='filename' value='commons-lang3-3.1-sources.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='commons-lang3/3.1' />
		<param name='filename' value='commons-lang3-3.1.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='commons-lang3/3.1' />
		<param name='filename' value='LICENSE.txt' />
	</antcall>
	<move file="${dist.temp.jars}/commons-lang3/3.1/LICENSE.txt" tofile="${dist.temp.jars}/commons-lang3/ApacheCommons-license.txt"/>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='jcalendar-1.3.2' />
		<param name='filename' value='jcalendar-1.3.2-src.zip' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jcalendar-1.3.2' />
		<param name='filename' value='jcalendar-1.3.2.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jcalendar-1.3.2' />
		<param name='filename' value='LICENSE.jcalendar' />
	</antcall>
	<move file="${dist.temp.jars}/jcalendar-1.3.2/LICENSE.jcalendar" tofile="${dist.temp.jars}/jcalendar-1.3.2/jcalendar-license.txt"/>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='jgraph' />
		<param name='filename' value='miradi-jgraph-5.12.2.2b-src.zip' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jgraph' />
		<param name='filename' value='miradi-jgraph-5.12.2.2b.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jgraph' />
		<param name='filename' value='LICENSE.jgraph' />
	</antcall>
	<move file="${dist.temp.jars}/jgraph/LICENSE.jgraph" tofile="${dist.temp.jars}/jgraph/jgraph-license.txt"/>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='jhlabs' />
		<param name='filename' value='layouts.zip' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jhlabs' />
		<param name='filename' value='LICENSE.TXT' />
	</antcall>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing' />
		<param name='filename' value='jing-src-20091111.zip' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing' />
		<param name='filename' value='LICENSE xerces.copying.txt' />
	</antcall>
	<move file="${dist.temp.jars}/jing/LICENSE xerces.copying.txt" tofile="${dist.temp.jars}/jing/xerces-license.txt"/>
	
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing' />
		<param name='filename' value='LICENSE-jing.txt' />
	</antcall>
	<move file="${dist.temp.jars}/jing/LICENSE-jing.txt" tofile="${dist.temp.jars}/jing/jing-license.txt"/>
	
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing' />
		<param name='filename' value='readme.html' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/bin' />
		<param name='filename' value='isorelax.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/bin' />
		<param name='filename' value='jing.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/bin' />
		<param name='filename' value='saxon.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/bin' />
		<param name='filename' value='xercesImpl.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/bin' />
		<param name='filename' value='xml-apis.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/lib' />
		<param name='filename' value='mns.rng' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/lib' />
		<param name='filename' value='nrl.rng' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/lib' />
		<param name='filename' value='relaxCore.rng' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/lib' />
		<param name='filename' value='relaxCoreDatatypes.rng' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/lib' />
		<param name='filename' value='relaxng.rnc' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/lib' />
		<param name='filename' value='relaxng.rng' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/lib' />
		<param name='filename' value='schematron.rnc' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jing/lib' />
		<param name='filename' value='xslt.rng' />
	</antcall>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='jtreetable' />
		<param name='filename' value='license.txt' />
	</antcall>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='JUnit/bin' />
		<param name='filename' value='junit.jar' />
	</antcall>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='martus-swing/bin' />
		<param name='filename' value='martus-swing.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='martus-swing/source' />
		<param name='filename' value='martus-swing-src.jar' />
	</antcall>
	
	<antcall target='copy-thirdparty'>
			<param name='directory' value='martus-swing' />
			<param name='filename' value='martus-swing-license.txt' />
	</antcall>
	
	<antcall target='copy-thirdparty'>
		<param name='directory' value='martus-utils/bin' />
		<param name='filename' value='martus-utils.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='martus-utils/source' />
		<param name='filename' value='martus-utils-src.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='martus-utils' />
		<param name='filename' value='martus-utils-license.txt' />
	</antcall>
	
	<antcall target='copy-thirdparty'>
		<param name='directory' value='swingx/0.9.7' />
		<param name='filename' value='swingx-0.9.7.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='swingx/0.9.7' />
		<param name='filename' value='swingx-0.9.7-src.zip' />
	</antcall>
	<antcall target='copy-thirdparty'>
			<param name='directory' value='swingx/0.9.7' />
			<param name='filename' value='COPYING' />
	</antcall>
	<move file="${dist.temp.jars}/swingx/0.9.7/COPYING" tofile="${dist.temp.jars}/swingx/0.9.7/swingx-license.txt"/>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='jortho/bin' />
		<param name='filename' value='jortho.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jortho/lib' />
		<param name='filename' value='JOrtho_0.5.zip' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jortho' />
		<param name='filename' value='license-jortho.txt' />
	</antcall>
	<move file="${dist.temp.jars}/jortho/license-jortho.txt" tofile="${dist.temp.jars}/jortho/jortho-license.txt"/>
	
	<antcall target='copy-thirdparty'>
		<param name='directory' value='jortho/lib' />
		<param name='filename' value='dictionary_en_2009_01.zip' />
	</antcall>
	<unzip src='${dist.temp.jars}/jortho/lib/dictionary_en_2009_01.zip' dest='${dist.temp}'>
		<patternset>
			<include name="**/*.ortho"/>
		</patternset>
	</unzip>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='shef/0.5' />
		<param name='filename' value='shef.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='shef/0.5' />
		<param name='filename' value='LICENSE-shef.txt' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='shef/0.5' />
		<param name='filename' value='shef-src.zip' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='shef/0.5' />
		<param name='filename' value='sam.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='shef/0.5' />
		<param name='filename' value='LICENSE-sam.txt' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='shef/0.5' />
		<param name='filename' value='sam-src.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='shef/0.5' />
		<param name='filename' value='jtidy-8.0.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='shef/0.5' />
		<param name='filename' value='LICENSE-jtidy.txt' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='shef/0.5' />
		<param name='filename' value='jtidy-src.zip' />
	</antcall>

	<antcall target='copy-thirdparty'>
		<param name='directory' value='flatlaf' />
		<param name='filename' value='flatlaf-1.6.1.jar' />
	</antcall>
	<antcall target='copy-thirdparty'>
		<param name='directory' value='flatlaf' />
		<param name='filename' value='flatlaf-intellij-themes-1.6.1.jar' />
	</antcall>
</target>

<!-- ================================================================== -->
<!-- C U S T O M  T A S K   D E S                                       -->
<!-- ================================================================== -->
<taskdef name="appbundler"
         classname="com.oracle.appbundler.AppBundlerTask"
         classpath="${installer.mac.dir}/appbundler-1.0ea/appbundler-1.0ea.jar" />
<taskdef name="install4j"
         classname="com.install4j.Install4JTask"
         classpath="${env.INSTALL4J.INSTALL.PATH}\ant.jar"/>

<!-- ================================================================== -->
<!-- C O P Y  I N S T A L L E R  R E S O U R C E  F I L E S                                                            -->
<!-- ================================================================== -->
<target name='copy-installer-resource-files' depends='jar' description='Copy Installer Resource Files'>

	<copy file="${installer.buildfiles.dir}/${samples.marine.miradi}" tofile="${dist.dir}/${samples.marine.miradi.version}" />
	<copy file="${installer.buildfiles.dir}/README.txt" todir="${dist.dir}" />

</target>
	
<!-- ================================================================== -->
<!-- Z I P S                                                            -->
<!-- ================================================================== -->
<target name='zips' depends='ThirdParty, jar, copy-installer-resource-files' description='Create Linux/Mac Zip Files'>
	<property name='JarFolder' value='ThirdParty'/>

    <zip destfile="${dist.dir}/Miradi-Linux.zip">
		<zipfileset dir="${installer.buildfiles.dir}" includes="README.txt"/>
		<zipfileset dir="${installer.buildfiles.dir}" includes="LICENSE.txt"/>
		<zipfileset dir="${installer.buildfiles.dir}" includes="LicenseOverview.txt"/>
    	<zipfileset dir="${dist.dir}" includes="miradi.jar"/>
		<zipfileset dir="${dist.dir}" includes="${samples.marine.miradi.version}" />

    	<!-- ThirdParty jars -->
    	<zipfileset dir="${dist.temp.jars}/BrowserLauncher2/" prefix='${JarFolder}' includes="BrowserLauncher*.jar" />
    	<zipfileset dir="${dist.temp.jars}/BrowserLauncher2/" prefix='${JarFolder}' includes="BrowserLauncher2-license.txt" />
    	<zipfileset dir="${dist.temp.jars}/commons-lang3/3.1/" prefix="${JarFolder}" includes="commons-lang3-3.1.jar" />
    	<zipfileset dir="${dist.temp.jars}/commons-lang3/" prefix="${JarFolder}" includes="ApacheCommons-license.txt" />
    	<zipfileset dir="${dist.temp.jars}/jcalendar-1.3.2/" prefix='${JarFolder}' includes="jcalendar*.jar" />
    	<zipfileset dir="${dist.temp.jars}/jcalendar-1.3.2/" prefix='${JarFolder}' includes="jcalendar-license.txt" />
    	<zipfileset dir="${dist.temp.jars}/jgraph/" prefix='${JarFolder}' includes="miradi-jgraph-5.12.2.2b.jar" />
    	<zipfileset dir="${dist.temp.jars}/jgraph/" prefix='${JarFolder}' includes="jgraph-license.txt" />
    	<zipfileset dir="${dist.temp.jars}/martus-utils/bin/" prefix='${JarFolder}' includes="martus-utils.jar" />
    	<zipfileset dir="${dist.temp.jars}/martus-utils/" prefix='${JarFolder}' includes="martus-utils-license.txt" />
       	<zipfileset dir="${dist.temp.jars}/martus-swing/bin/" prefix='${JarFolder}' includes="martus-swing.jar" />
    	<zipfileset dir="${dist.temp.jars}/martus-swing/" prefix='${JarFolder}' includes="martus-swing-license.txt" />
        <zipfileset dir="${dist.temp.jars}/jing/bin/" prefix='${JarFolder}' includes="jing.jar" />
    	<zipfileset dir="${dist.temp.jars}/jing/" prefix='${JarFolder}' includes="jing-license.txt" />
    	<zipfileset dir="${dist.temp.jars}/jing/" prefix='${JarFolder}' includes="xerces-license.txt" />
        <zipfileset dir="${dist.temp.jars}/swingx/0.9.7/" prefix='${JarFolder}' includes="swingx-0.9.7.jar" />
    	<zipfileset dir="${dist.temp.jars}/swingx/0.9.7/" prefix='${JarFolder}' includes="swingx-license.txt" />
    	<zipfileset dir="${dist.temp.jars}/jortho/bin/" prefix='${JarFolder}' includes="*.jar"/>
    	<zipfileset dir="${dist.temp.jars}/jortho/" prefix='${JarFolder}' includes="jortho-license.txt"/>
    	<zipfileset dir="${dist.temp.jars}/shef/0.5/" prefix="${JarFolder}" includes="shef.jar" />
    	<zipfileset dir="${dist.temp.jars}/shef/0.5/" prefix="${JarFolder}" includes="LICENSE-shef.txt" />
    	<zipfileset dir="${dist.temp.jars}/shef/0.5/" prefix="${JarFolder}" includes="sam.jar" />
       	<zipfileset dir="${dist.temp.jars}/shef/0.5/" prefix="${JarFolder}" includes="LICENSE-sam.txt" />
       	<zipfileset dir="${dist.temp.jars}/shef/0.5/" prefix="${JarFolder}" includes="jtidy-8.0.jar" />
        <zipfileset dir="${dist.temp.jars}/shef/0.5/" prefix="${JarFolder}" includes="LICENSE-jtidy.txt" />
        <zipfileset dir="${dist.temp.jars}/flatlaf/" prefix="${JarFolder}" includes="flatlaf-1.6.1.jar" />
        <zipfileset dir="${dist.temp.jars}/flatlaf/" prefix="${JarFolder}" includes="flatlaf-intellij-themes-1.6.1.jar" />
    </zip>

	<!-- Third-party source code -->
	<zip destfile="${dist.dir}/Miradi-Thirdparty-Source.zip">
    	<zipfileset dir="${dist.temp.jars}/BrowserLauncher2/" prefix='source' includes="BrowserLauncher2-all-10rc4.jar" />
    	<zipfileset dir="${dist.temp.jars}/commons-lang3/3.1/" prefix="source" includes="commons-lang3-3.1-sources.jar" />
    	<zipfileset dir="${dist.temp.jars}/jcalendar-1.3.2/" prefix='source' includes="jcalendar-1.3.2-src.zip" />
    	<zipfileset dir="${dist.temp.jars}/jgraph/" prefix='source' includes="miradi-jgraph-5.12.2.2b-src.zip" />
    	<zipfileset dir="${dist.temp.jars}/martus-swing/source/" prefix='source' includes="martus-swing-src.jar" />
		<zipfileset dir="${dist.temp.jars}/martus-utils/source/" prefix='source' includes="martus-utils-src.jar" />
    	<zipfileset dir="${dist.temp.jars}/jing/" prefix='source' includes="jing-src*.zip" />
    	<zipfileset dir="${dist.temp.jars}/swingx/0.9.7" prefix="source" includes="swingx-0.9.7-src.zip" />
		<zipfileset dir="${dist.temp.jars}/jortho/" prefix="source" includes="**/JOrtho*.zip" />
		<zipfileset dir="${dist.temp.jars}/jortho/" prefix="source" includes="**/dictionary*.zip" />
    	<zipfileset dir="${dist.temp.jars}/shef/0.5/" prefix="source" includes="shef-src.jar" />
    	<zipfileset dir="${dist.temp.jars}/shef/0.5/" prefix="source" includes="sam-src.jar" />
    	<zipfileset dir="${dist.temp.jars}/shef/0.5/" prefix="source" includes="jtidy-src.zip" />
	</zip>

</target>

<!-- ================================================================== -->
<!-- P O T                                            -->
<!-- ================================================================== -->
<target name="pot" depends="init" description="Create Translatable POT file">
	<property name="java_files" value="${dist.dir}/java_files.txt"/>
	<mkdir dir="${dist.dir}" />
		
	<!-- Required for all languages -->
	<echo message="build list of all files that contain translatable strings"/>
	<echo message="Writing list of java files in ${eam.src.root} to ${java_files}..." />
	<exec executable="find" output="${java_files}" failonerror="true">
		<arg value="${eam.src.root}"/>
		<arg value="-name"/>
		<arg value="*.java"/>
	</exec>
	<echo message="extract code text strings to pot file"/>
	<exec executable="xgettext" failonerror="true">
		<arg value="--language=java"/>
		<arg value="--from-code=UTF-8"/>
		<arg value="--sort-output"/>
		<arg value="--keyword"/>
		<arg value="--keyword=EAM.text"/>
		<arg value="--copyright-holder=Benetech"/>
		<arg value="--output=${miradi.pot}"/>
		<arg value="--files-from=${java_files}"/>
	</exec>
	<!-- Hopefully abort if there are non-UTF-8 characters in the pot -->
	<exec executable="iconv" failonerror="true" output="/dev/null">
		<arg value="${miradi.pot}"/>
	</exec>
	<delete file="${java_files}"/>
	<echo message="append FieldLabels.properties strings to pot file"/>
	<exec executable="ruby" failonerror="true">
		<arg value="${build.dir}/AddFieldLabelsToPOT.rb"/>
		<arg value="${eam.fieldlabels.properties}"/>
		<arg value="${miradi.pot}"/>
	</exec>
	<echo message="append each HTML file as an entry in the pot file"/>
	<exec executable="ruby" failonerror="true">
		<arg value="${build.dir}/AddHtmlFilesToPOT.rb"/>
		<arg value="${eam.src.root}"/>
		<arg value="${miradi.pot}"/>
	</exec>
	<echo message="append each fieldoptions choice as an entry in the pot file"/>
	<exec executable="ruby" failonerror="true">
		<arg value="${build.dir}/AddChoicesToPOT.rb"/>
		<arg value="${eam.src.root}"/>
		<arg value="${miradi.pot}"/>
	</exec>
</target>

<!-- ================================================================== -->
<!-- CREATE NEW PO                                            -->
<!--   
	NOTE: You can only create ONE po file at a time
	1. Create the new po property at the top of this file
	2. Add the new language to the dependencies of the translations target
	3. Insert three lines like this	at the start of the new language target:	
		<property name="po.locale" value="XXX" />
		<property name="po.file" value="${miradi.po.xxx}" />
		<antcall target="create-new-po"/>
		
	4. Allow the build to run
	5. The new PO file should be in your workspace next time you sync and pull
	6. Delete the three lines of code mentioned above
	7. Manually edit the PO headers as needed, and re-commit
-->
<!-- ================================================================== -->
<target name="create-new-po" description="Create empty po file">
	<!--suppress AntResolveInspection -->
    <echo message="Creating po file: ${po.locale} ${po.file}"/>
	<exec executable="msginit" failonerror="true">
		<arg value="--no-translator"/>
		<arg value="--input=${miradi.pot}"/>
		<arg value="--output-file=${po.file}"/>
		<!--suppress AntResolveInspection -->
        <arg value="--locale=${po.locale}"/>
	</exec>

	<echo message="Updating PO to UTF-8"/>
	<exec executable="sed" failonerror="true">
		<arg value="-i ''" />
		<arg value='s/^"Content-Type:.*$/"Content-Type: text\/plain; charset=UTF-8\\n"/'/>
		<arg value="${po.file}" />
	</exec>

</target>

<!-- ================================================================== -->
<!-- B U L G A R I A N                                                  -->
<!-- ================================================================== -->
<target name="bulgarian" depends="pot" description="Update Bulgarian Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.bg}"/>
		<param name="language.code" value="bg"/>
	</antcall>
</target>

<!-- ================================================================== -->
<!-- C H I N E S E                                                      -->
<!-- ================================================================== -->
<target name="chinese" depends="pot" description="Update Chinese Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.zh}"/>
		<param name="language.code" value="zh"/>
	</antcall>
</target>

<!-- ================================================================== -->
<!-- FRENCH                                                             -->
<!-- ================================================================== -->
<target name="french" depends="pot" description="Update French Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.fr}"/>
		<param name="language.code" value="fr"/>
	</antcall>
</target>
		
<!-- ================================================================== -->
<!-- GERMAN                                                             -->
<!-- ================================================================== -->
<target name="german" depends="pot" description="Update German Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.de}"/>
		<param name="language.code" value="de"/>
	</antcall>
</target>
			
<!-- ================================================================== -->
<!-- HEBREW                                                             -->
<!-- ================================================================== -->
<target name="hebrew" depends="pot" description="Update Hebrew Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.he}"/>
		<param name="language.code" value="he"/>
	</antcall>
</target>
	
<!-- ================================================================== -->
<!-- HUNGARIAN                                                          -->
<!-- ================================================================== -->
<target name="hungarian" depends="pot" description="Update Hungarian Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.hu}"/>
		<param name="language.code" value="hu"/>
	</antcall>
</target>

<!-- ================================================================== -->
<!-- I N D O N E S I A N                                                -->
<!-- ================================================================== -->
<target name="indonesian" depends="pot" description="Update Indonesian Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.id}"/>
		<param name="language.code" value="id"/>
	</antcall>
</target>
	
<!-- ================================================================== -->
<!-- ITALIAN                                                            -->
<!-- ================================================================== -->
<target name="italian" depends="pot" description="Update Italian Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.it}"/>
		<param name="language.code" value="it"/>
	</antcall>
</target>

<!-- ================================================================== -->
<!-- MALAGASY (PLATEAU)                                                 -->
<!-- ================================================================== -->
<target name="malagasy" depends="pot" description="Update Malagasy Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.plt}"/>
		<param name="language.code" value="plt"/>
	</antcall>
</target>

<!-- ================================================================== -->
<!-- MONGOLIAN (CYRILLIC SCRIPT)                                        -->
<!-- ================================================================== -->
<target name="mongolian" depends="pot" description="Update Mongolian Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.mn}"/>
		<param name="language.code" value="mn"/>
	</antcall>
</target>

<!-- ================================================================== -->
<!-- NEPALESE					                                        -->
<!-- ================================================================== -->
<target name="nepalese" depends="pot" description="Update Nepalese Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.ne}"/>
		<param name="language.code" value="ne"/>
	</antcall>
</target>

<!-- ================================================================== -->
<!-- PORTUGUESE                                                         -->
<!-- ================================================================== -->
<target name="portuguese" depends="pot" description="Update Portuguese Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.pt}"/>
		<param name="language.code" value="pt"/>
	</antcall>
</target>

<!-- ================================================================== -->
<!-- PSP (English, but with some terms substituted                      -->
<!-- ================================================================== -->
<target name="psp-langpack" depends="pot" description="Update PSP Language Pack Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.psp}"/>
		<param name="language.code" value="psp"/>
	</antcall>
</target>

<!-- ================================================================== -->
<!-- S P A N I S H                                                      -->
<!-- ================================================================== -->
<target name="spanish" depends="pot" description="Update Spanish Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.es}"/>
		<param name="language.code" value="es"/>
	</antcall>
</target>
	
<!-- ================================================================== -->
<!-- UKRAINIAN                                                          -->
<!-- ================================================================== -->
<target name="ukrainian" depends="pot" description="Update Ukrainian Content">
	<antcall target="update-po">
		<param name="po.file" value="${miradi.po.uk}"/>
		<param name="language.code" value="uk"/>
	</antcall>
</target>

<!-- ================================================================== -->
<!-- USAID Project (English, but with some terms substituted)           -->
<!-- ================================================================== -->
<target name="usaid-project-langpack" depends="pot" description="Update USAID Project Language Pack Content">
    <antcall target="update-po">
        <param name="po.file" value="${miradi.po.aid}"/>
        <param name="language.code" value="aid"/>
    </antcall>
</target>
	
<!-- ================================================================== -->
<!-- UPDATE PO CONTENTS                                                 -->
<!-- ================================================================== -->
<target name="update-po" description="Update ${po.file}">
	<echo message="updating ${po.file}"/>
	<exec executable="msgmerge" failonerror="true">
		<arg value="--update"/>
		<arg value="--backup=none"/>
		<arg value="--no-fuzzy-matching"/>
		<arg value="${po.file}"/>
		<arg value="${miradi.pot}"/>
	</exec>
	<echo message="building ${language.code} content jar"/>
	<zip destfile="${dist.dir}/MiradiContent-${version.langpack}-${language.code}.jar">
        <fileset dir="${eam.src.root}" includes="**/*.jpg"/>
        <fileset dir="${eam.src.root}" includes="**/*.png"/>
        <fileset dir="${eam.src.root}" includes="**/*.gif"/>
		<fileset dir="${translations.dir}" includes="miradi_${language.code}.po"/>
	</zip>
</target>

<!-- ================================================================== -->
<!-- T R A N S L A T I O N S                                            -->
<!-- ================================================================== -->
<target name="translations" 
	depends="pot, bulgarian, chinese, french, german, hebrew, hungarian, indonesian, italian, malagasy, mongolian, nepalese, portuguese, psp-langpack, spanish, ukrainian, usaid-project-langpack"
	description="Create Translatable Content jars/zips">

	<!-- Add any new translation files -->	
	<exec executable="git" failonerror="false" dir="${miradi.root.dir}" >
		<arg value="add"/>
		<arg value="${translations.subdir}"/>
	</exec>

	<!-- See if there is anything to commit -->
	<exec executable="git" failonerror="true" dir="${translations.dir}" outputproperty="output">
		<arg value="status"/>
		<arg value="--untracked-files=no" />
		<arg value="-s" />
	</exec>
	<condition property="FilesWereModified">
		<length string="${output}" trim="true" when="greater" length="0" />
	</condition>
	<!--
	<antcall target="CommitTranslations" />
	-->
</target>

<target name="CommitTranslations" if="FilesWereModified">
	<echo message="Committing translations" />
	<exec executable="git" failonerror="true" dir="${miradi.root.dir}">
		<arg value="commit" />
		<arg value="--untracked-files=no" />
		<arg value="-m" />
		<arg value="Updated PO files: ${version.timestamp}" />
	</exec>
	<exec executable="git" failonerror="true" dir="${miradi.root.dir}">
		<arg value="push" />
		<arg value="origin" />
		<arg value="${scm.miradi-client.branch}" />
	</exec>
</target>
	
<!-- ================================================================== -->
<!-- S O U R C E                                                        -->
<!-- ================================================================== -->
<target name="source" depends="init" description="Create Source zip">
	<echo message="building Mirad-Source.zip"/>
	<zip destfile="${dist.dir}/Miradi-Source.zip">
		<zipfileset dir="${eam.src.root}/" prefix='Miradi-${version.full}' includes="**/*" excludes=".svn" />
		<zipfileset dir="${installer.buildfiles.dir}" includes="README.txt"/>
		<zipfileset dir="${installer.buildfiles.dir}" includes="LICENSE.txt"/>
		<zipfileset dir="${installer.buildfiles.dir}" includes="LicenseOverview.txt"/>
		<zipfileset dir="${build.dir}" includes='build.xml'/>
	</zip>
</target>

<!-- ================================================================== -->
<!-- M A C   A P P   B U N D L E                                        -->
<!-- ================================================================== -->
<target name="macappbundle" depends="" description="create a jar app bundle for the mac">

	<mkdir dir="${dist.mactree}" />
	<delete>
		<fileset dir="${dist.mactree}" includes="*" />
	</delete>

	<appbundler
		debug="true"
		jvmrequired="1.8"
		outputdirectory="${dist.mactree}"
		name="${mac.app.name}"
		displayname="${mac.app.name}"
		executableName="${mac.app.name}"
		identifier="org.miradi.main.Miradi"
		shortversion="${version.full}"
		version="${version.timestamp}"
		icon="${eam.icons}/miradi.icns"
		mainclassname="org.miradi.main.Miradi"
		plistClassPaths="$APP_ROOT/Contents/Java/miradi.jar,
						 $APP_ROOT/Contents/Java/BrowserLauncher2-all-10rc4.jar,
						 $APP_ROOT/Contents/Java/junit.jar,
						 $APP_ROOT/Contents/Java/commons-lang3-3.1.jar,
						 $APP_ROOT/Contents/Java/jcalendar-1.3.2.jar,
						 $APP_ROOT/Contents/Java/miradi-jgraph-5.12.2.2b.jar,
						 $APP_ROOT/Contents/Java/isorelax.jar,
						 $APP_ROOT/Contents/Java/jing.jar,
						 $APP_ROOT/Contents/Java/saxon.jar,
						 $APP_ROOT/Contents/Java/xercesImpl.jar,
						 $APP_ROOT/Contents/Java/xml-apis.jar,
						 $APP_ROOT/Contents/Java/jortho.jar,
						 $APP_ROOT/Contents/Java/martus-swing.jar,
						 $APP_ROOT/Contents/Java/martus-utils.jar,
						 $APP_ROOT/Contents/Java/jtidy-8.0.jar,
						 $APP_ROOT/Contents/Java/sam.jar,
						 $APP_ROOT/Contents/Java/shef.jar,
						 $APP_ROOT/Contents/Java/swingx-0.9.7.jar,
						 $APP_ROOT/Contents/Java/flatlaf-1.6.1.jar,
						 $APP_ROOT/Contents/Java/flatlaf-intellij-themes-1.6.1.jar">

		<arch name="x86_64"/>
		<arch name="i386"/>

		<classpath file="${dist.dir}/miradi.jar" />
		<classpath file="${dist.temp.jars}/BrowserLauncher2/BrowserLauncher2-all-10rc4.jar" />
		<classpath file="${dist.temp.jars}/JUnit/bin/junit.jar" />
		<classpath file="${dist.temp.jars}/commons-lang3/3.1/commons-lang3-3.1.jar" />
		<classpath file="${dist.temp.jars}/jcalendar-1.3.2/jcalendar-1.3.2.jar" />
		<classpath file="${dist.temp.jars}/jgraph/miradi-jgraph-5.12.2.2b.jar" />
		<classpath file="${dist.temp.jars}/jing/bin/isorelax.jar" />
		<classpath file="${dist.temp.jars}/jing/bin/jing.jar" />
		<classpath file="${dist.temp.jars}/jing/bin/saxon.jar" />
		<classpath file="${dist.temp.jars}/jing/bin/xercesImpl.jar" />
		<classpath file="${dist.temp.jars}/jing/bin/xml-apis.jar" />
		<classpath file="${dist.temp.jars}/jortho/bin/jortho.jar" />
		<classpath file="${dist.temp.jars}/martus-swing/bin/martus-swing.jar" />
		<classpath file="${dist.temp.jars}/martus-utils/bin/martus-utils.jar" />
		<classpath file="${dist.temp.jars}/shef/0.5/jtidy-8.0.jar" />
		<classpath file="${dist.temp.jars}/shef/0.5/sam.jar" />
		<classpath file="${dist.temp.jars}/shef/0.5/shef.jar" />
		<classpath file="${dist.temp.jars}/swingx/0.9.7/swingx-0.9.7.jar" />
		<classpath file="${dist.temp.jars}/flatlaf/flatlaf-1.6.1.jar" />
		<classpath file="${dist.temp.jars}/flatlaf/flatlaf-intellij-themes-1.6.1.jar" />

		<!-- Workaround as com.apple.mrj.application.apple.menu.about.name property may no longer work -->
		<option value="-Xdock:name=${mac.app.name}"/>

		<option value="-Dapple.laf.useScreenMenuBar=true"/>
		<option value="-Dapple.awt.brushMetal=true"/>
		<option value="-Dapple.awt.showGrowBox=true"/>
		<option value="-Dapple.awt.antialiasing=true"/>
		<option value="-Dapple.awt.textantialiasing"/>
		<option value="-Dcom.apple.macos.use-file-dialog-packages=true"/>
		<option value="-Dcom.apple.macos.useScreenMenuBar=true"/>
		<option value="-Dcom.apple.mrj.application.apple.menu.about.name=${mac.app.name}"/>
		<option value="-Dcom.apple.smallTabs=true"/>
		<option value="-Dfile.encoding=UTF-8"/>

		<option value="-Xmx521M" name="Xmx"/>
	</appbundler>

    <copy todir="${dist.mactree}">
        <fileset dir="${installer.mac.dmgbuild.dir}">
            <include name="**/*.*" />
        </fileset>
    </copy>

</target>

<!-- ================================================================== -->
<!-- M A C   D M G   F I L E                                            -->
<!-- ================================================================== -->
<target name="macdmgfile" depends="macappbundle" description="create a mac dmg file">
    <property name="mac.build.temp.dir" value="/Users/${mac.build.user}/miradi-build-temp" />
    <property name="mac.dmgbuild.settings" value="settings.py" />
    <property name="mac.dmgbuild.background" value="background.png" />
    <property name="mac.build.dmg" value="Miradi-${version.full}.dmg" />
    <property name="mac.build.dmg.name" value="Miradi ${version.full} Mac Install" />

    <!-- delete / create temp folder on mac build machine -->
    <echo message="Creating ${mac.build.temp.dir} folder on ${mac.build.user}@${mac.build.server}" />
    <exec executable="ssh" failonerror="true">
        <arg value="${mac.build.user}@${mac.build.server}"/>
        <arg value="rm -rf ${mac.build.temp.dir};
                    mkdir ${mac.build.temp.dir};
                    exit;"/>
    </exec>

    <!-- copy over necessary files -->
    <echo message="Copying files to ${mac.build.user}@${mac.build.server}:${mac.build.temp.dir}" />
    <exec executable="scp" failonerror="true">
        <arg value="-r"/>
        <arg value="${dist.mactree}/${mac.app.name}.app"/>
        <arg value="${dist.mactree}/${mac.dmgbuild.settings}"/>
        <arg value="${dist.mactree}/${mac.dmgbuild.background}"/>
        <arg value="${installer.buildfiles.dir}/README.txt"/>
        <arg value="${installer.buildfiles.dir}/LICENSE.txt"/>
        <arg value="${dist.dir}/${samples.marine.miradi.version}" />
        <arg value="${mac.build.user}@${mac.build.server}:${mac.build.temp.dir}"/>
    </exec>

    <!-- ssh to mac build machine and sign app, exec dmgbuild to create dmg -->
    <echo message="Signing ${mac.app.name}.app and building ${mac.build.dmg}" />
    <exec executable="ssh" failonerror="true">
        <arg value="${mac.build.user}@${mac.build.server}"/>
        <arg value="cd ${mac.build.temp.dir};
                    security unlock-keychain -p ${mac.build.password};
                    codesign -s ${mac.build.certname} -f ${mac.build.temp.dir}/${mac.app.name}.app;
                    /Users/${mac.build.user}/Library/Python/3.8/bin/dmgbuild -s ${mac.dmgbuild.settings} -D app=${mac.app.name}.app -D sample_project=${samples.marine.miradi.version} '${mac.build.dmg.name}' ${mac.build.dmg};
                    exit;"/>
    </exec>

    <!-- copy back over built dmg -->
    <echo message="Copying ${mac.build.user}@${mac.build.server}:${mac.build.temp.dir}/${mac.build.dmg} to ${dist.dir}/${mac.build.dmg}" />
    <exec executable="scp" failonerror="true">
        <arg value="${mac.build.user}@${mac.build.server}:${mac.build.temp.dir}/${mac.build.dmg}"/>
        <arg value="${dist.dir}/${mac.build.dmg}"/>
    </exec>

    <!-- delete temp folder on mac build machine -->
    <echo message="Deleting ${mac.build.temp.dir} on ${mac.build.user}@${mac.build.server}" />
    <exec executable="ssh" failonerror="true">
        <arg value="${mac.build.user}@${mac.build.server}"/>
        <arg value="rm -rf ${mac.build.temp.dir};
                    exit;"/>
    </exec>

	<delete dir="${dist.mactree}" />
</target>

<!-- ================================================================== -->
<!-- win32installer                                                    -->
<!-- ================================================================== -->
<target name="win32installer" depends="jar, copy-installer-resource-files" description="Windows install4j installer build">
    <install4j projectfile="${build.dir}/miradi.install4j" winKeystorePassword="${windows.build.certname.password}">
        <variable name="version.full" value="${version.full}"/>
        <variable name="windows.setup.name" value="${windows.setup.name}"/>
		<variable name="windows.build.certname.pfx" value="${windows.build.certname.pfx}"/>
        <variable name="dist.dir" value="${dist.dir}"/>
		<variable name="samples.marine.miradi.version" value="${samples.marine.miradi.version}"/>
        <variable name="dist.temp.jars" value="${dist.temp.jars}"/>
        <variable name="jres.path" value="${env.INSTALL4J.JRES.PATH}"/>
        <variable name="license" value="${env.INSTALL4J.LICENSE}"/>
    </install4j>
</target>

<!-- ================================================================== -->
<!-- R E L E A S E                                                      -->
<!-- ================================================================== -->
<target name="release" depends="source, zips, macdmgfile, win32installer">
    <echo message="Release Built"/>
    <echo message="REMEMBER TO TAG THIS RELEASE WITH ${version.timestamp} !"/>
</target>

</project>
